/*
Copyright 2019-2021 OpenFaaS Authors

Licensed under the MIT license. See LICENSE file in the project root for full license information.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// FunctionStatusApplyConfiguration represents an declarative configuration of the FunctionStatus type for use
// with apply.
type FunctionStatusApplyConfiguration struct {
	Conditions          []v1.Condition                     `json:"conditions,omitempty"`
	Replicas            *int32                             `json:"replicas,omitempty"`
	AvailableReplicas   *int32                             `json:"availableReplicas,omitempty"`
	UnavailableReplicas *int32                             `json:"unavailableReplicas,omitempty"`
	ObservedGeneration  *int64                             `json:"observedGeneration,omitempty"`
	Profiles            []AppliedProfileApplyConfiguration `json:"profiles,omitempty"`
}

// FunctionStatusApplyConfiguration constructs an declarative configuration of the FunctionStatus type for use with
// apply.
func FunctionStatus() *FunctionStatusApplyConfiguration {
	return &FunctionStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *FunctionStatusApplyConfiguration) WithConditions(values ...v1.Condition) *FunctionStatusApplyConfiguration {
	for i := range values {
		b.Conditions = append(b.Conditions, values[i])
	}
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *FunctionStatusApplyConfiguration) WithReplicas(value int32) *FunctionStatusApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithAvailableReplicas sets the AvailableReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AvailableReplicas field is set to the value of the last call.
func (b *FunctionStatusApplyConfiguration) WithAvailableReplicas(value int32) *FunctionStatusApplyConfiguration {
	b.AvailableReplicas = &value
	return b
}

// WithUnavailableReplicas sets the UnavailableReplicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UnavailableReplicas field is set to the value of the last call.
func (b *FunctionStatusApplyConfiguration) WithUnavailableReplicas(value int32) *FunctionStatusApplyConfiguration {
	b.UnavailableReplicas = &value
	return b
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *FunctionStatusApplyConfiguration) WithObservedGeneration(value int64) *FunctionStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithProfiles adds the given value to the Profiles field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Profiles field.
func (b *FunctionStatusApplyConfiguration) WithProfiles(values ...*AppliedProfileApplyConfiguration) *FunctionStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithProfiles")
		}
		b.Profiles = append(b.Profiles, *values[i])
	}
	return b
}
