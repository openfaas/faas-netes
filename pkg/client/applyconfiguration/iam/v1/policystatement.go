/*
Copyright 2019-2021 OpenFaaS Authors

Licensed under the MIT license. See LICENSE file in the project root for full license information.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openfaas/faas-netes/pkg/apis/iam/v1"
)

// PolicyStatementApplyConfiguration represents an declarative configuration of the PolicyStatement type for use
// with apply.
type PolicyStatementApplyConfiguration struct {
	SID       *string          `json:"sid,omitempty"`
	Effect    *string          `json:"effect,omitempty"`
	Action    []string         `json:"action,omitempty"`
	Resource  []string         `json:"resource,omitempty"`
	Condition *v1.ConditionMap `json:"condition,omitempty"`
}

// PolicyStatementApplyConfiguration constructs an declarative configuration of the PolicyStatement type for use with
// apply.
func PolicyStatement() *PolicyStatementApplyConfiguration {
	return &PolicyStatementApplyConfiguration{}
}

// WithSID sets the SID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SID field is set to the value of the last call.
func (b *PolicyStatementApplyConfiguration) WithSID(value string) *PolicyStatementApplyConfiguration {
	b.SID = &value
	return b
}

// WithEffect sets the Effect field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Effect field is set to the value of the last call.
func (b *PolicyStatementApplyConfiguration) WithEffect(value string) *PolicyStatementApplyConfiguration {
	b.Effect = &value
	return b
}

// WithAction adds the given value to the Action field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Action field.
func (b *PolicyStatementApplyConfiguration) WithAction(values ...string) *PolicyStatementApplyConfiguration {
	for i := range values {
		b.Action = append(b.Action, values[i])
	}
	return b
}

// WithResource adds the given value to the Resource field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Resource field.
func (b *PolicyStatementApplyConfiguration) WithResource(values ...string) *PolicyStatementApplyConfiguration {
	for i := range values {
		b.Resource = append(b.Resource, values[i])
	}
	return b
}

// WithCondition sets the Condition field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Condition field is set to the value of the last call.
func (b *PolicyStatementApplyConfiguration) WithCondition(value v1.ConditionMap) *PolicyStatementApplyConfiguration {
	b.Condition = &value
	return b
}
