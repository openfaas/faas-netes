/*
Copyright 2019-2021 OpenFaaS Authors

Licensed under the MIT license. See LICENSE file in the project root for full license information.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openfaas/faas-netes/pkg/apis/iam/v1"
)

// RoleSpecApplyConfiguration represents an declarative configuration of the RoleSpec type for use
// with apply.
type RoleSpecApplyConfiguration struct {
	Policy    []string            `json:"policy,omitempty"`
	Principal map[string][]string `json:"principal,omitempty"`
	Condition *v1.ConditionMap    `json:"condition,omitempty"`
}

// RoleSpecApplyConfiguration constructs an declarative configuration of the RoleSpec type for use with
// apply.
func RoleSpec() *RoleSpecApplyConfiguration {
	return &RoleSpecApplyConfiguration{}
}

// WithPolicy adds the given value to the Policy field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Policy field.
func (b *RoleSpecApplyConfiguration) WithPolicy(values ...string) *RoleSpecApplyConfiguration {
	for i := range values {
		b.Policy = append(b.Policy, values[i])
	}
	return b
}

// WithPrincipal puts the entries into the Principal field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Principal field,
// overwriting an existing map entries in Principal field with the same key.
func (b *RoleSpecApplyConfiguration) WithPrincipal(entries map[string][]string) *RoleSpecApplyConfiguration {
	if b.Principal == nil && len(entries) > 0 {
		b.Principal = make(map[string][]string, len(entries))
	}
	for k, v := range entries {
		b.Principal[k] = v
	}
	return b
}

// WithCondition sets the Condition field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Condition field is set to the value of the last call.
func (b *RoleSpecApplyConfiguration) WithCondition(value v1.ConditionMap) *RoleSpecApplyConfiguration {
	b.Condition = &value
	return b
}
