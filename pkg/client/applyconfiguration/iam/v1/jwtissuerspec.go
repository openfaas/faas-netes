/*
Copyright 2019-2021 OpenFaaS Authors

Licensed under the MIT license. See LICENSE file in the project root for full license information.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// JwtIssuerSpecApplyConfiguration represents an declarative configuration of the JwtIssuerSpec type for use
// with apply.
type JwtIssuerSpecApplyConfiguration struct {
	Issuer         *string  `json:"iss,omitempty"`
	IssuerInternal *string  `json:"issInternal,omitempty"`
	Audience       []string `json:"aud,omitempty"`
	TokenExpiry    *string  `json:"tokenExpiry,omitempty"`
}

// JwtIssuerSpecApplyConfiguration constructs an declarative configuration of the JwtIssuerSpec type for use with
// apply.
func JwtIssuerSpec() *JwtIssuerSpecApplyConfiguration {
	return &JwtIssuerSpecApplyConfiguration{}
}

// WithIssuer sets the Issuer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Issuer field is set to the value of the last call.
func (b *JwtIssuerSpecApplyConfiguration) WithIssuer(value string) *JwtIssuerSpecApplyConfiguration {
	b.Issuer = &value
	return b
}

// WithIssuerInternal sets the IssuerInternal field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IssuerInternal field is set to the value of the last call.
func (b *JwtIssuerSpecApplyConfiguration) WithIssuerInternal(value string) *JwtIssuerSpecApplyConfiguration {
	b.IssuerInternal = &value
	return b
}

// WithAudience adds the given value to the Audience field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Audience field.
func (b *JwtIssuerSpecApplyConfiguration) WithAudience(values ...string) *JwtIssuerSpecApplyConfiguration {
	for i := range values {
		b.Audience = append(b.Audience, values[i])
	}
	return b
}

// WithTokenExpiry sets the TokenExpiry field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TokenExpiry field is set to the value of the last call.
func (b *JwtIssuerSpecApplyConfiguration) WithTokenExpiry(value string) *JwtIssuerSpecApplyConfiguration {
	b.TokenExpiry = &value
	return b
}
