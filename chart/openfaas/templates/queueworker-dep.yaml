{{- if and .Values.async .Values.openfaasPro }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ template "openfaas.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: queue-worker
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: queue-worker
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: {{ .Values.queueWorker.replicas }}
  selector:
    matchLabels:
      app: queue-worker
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
      labels:
        app: queue-worker
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.jetstreamQueueWorker.topologySpreadConstraints }}
      topologySpreadConstraints:
      {{- toYaml .Values.jetstreamQueueWorker.topologySpreadConstraints | nindent 8 }}
      {{- end }}
      volumes:
      - name: license
        secret:
          secretName: openfaas-license
      containers:
      - name:  queue-worker
        resources:
          {{- .Values.queueWorker.resources | toYaml | nindent 12 }}
        image: {{ include "openfaas.image" (dict "image" .Values.jetstreamQueueWorker.image "registryPrefix" .Values.registryPrefix) }}
        imagePullPolicy: {{ .Values.openfaasImagePullPolicy }}
        {{- if .Values.jetstreamQueueWorker.pprof }}
        ports:
        - name: pprof
          containerPort: 6060
          protocol: TCP
        {{- end }}
        command:
          - "jetstream-queue-worker"
          - "-license-file=/var/secrets/license/license"
          {{- if .Values.jetstreamQueueWorker.pprof }}
          - "-pprof=true"
          {{- end }}
        env:
        {{- if .Values.nats.external.enabled }}
        - name: nats_host
          value: "{{ .Values.nats.external.host }}"
        - name: nats_port
          value: "{{ .Values.nats.external.port }}"
        {{- else }}
        - name: nats_host
          value: "nats.{{ .Release.Namespace }}.svc.{{ .Values.kubernetesDNSDomain }}"
        {{- end}}

        # Only required for stream migration when upgrading queue-worker from version < 0.3.47
        # Not used once stream has been migrated.
        - name: nats_stream
          value: "{{ .Values.nats.channel }}"
        - name: nats_durable
          value: "{{ .Values.jetstreamQueueWorker.durableName }}"
        - name: default_function_name
          value: "{{ .Values.functionNamespace }}"

        - name: max_inflight
          value: "{{ .Values.queueWorkerPro.maxInflight }}"
        - name: "scaling_mode"
          value: "{{ .Values.jetstreamQueueWorker.mode }}"
{{- if .Values.jetstreamQueueWorker.consumer.inactiveThreshold }}
        - name: "consumer_inactive_threshold"
          value: "{{ .Values.jetstreamQueueWorker.consumer.inactiveThreshold }}"
{{- end }}
        {{- if .Values.jetstreamQueueWorker.consumer.pullMaxMessages }}
        - name: "consumer_pull_max_messages"
          value: "{{ .Values.jetstreamQueueWorker.consumer.pullMaxMessages }}"
        {{- end }}
        - name: gateway_url
          value: "http://gateway.{{ .Release.Namespace }}.svc.{{ .Values.kubernetesDNSDomain }}:8080"
        - name: "tls_insecure"
          value: "{{ .Values.queueWorkerPro.insecureTLS }}"
        - name: "debug"
          value: "{{ .Values.jetstreamQueueWorker.logs.debug }}"
        - name: "log_encoding"
          value: "{{ .Values.jetstreamQueueWorker.logs.format }}"

        - name: nats_stream_replicas
          value: "{{ .Values.nats.streamReplication }}"
        - name: ack_wait
          value: "{{ .Values.queueWorker.ackWait }}"

        - name: adaptive_concurrency
          value: "{{ .Values.jetstreamQueueWorker.adaptiveConcurrency }}"
        - name: upstream_timeout
          value: "{{ .Values.gateway.upstreamTimeout }}"
        - name: "max_retry_attempts"
          value: "{{ .Values.queueWorkerPro.maxRetryAttempts }}"
        - name: "max_retry_wait"
          value: "{{ .Values.queueWorkerPro.maxRetryWait }}"
        - name: "initial_retry_wait"
          value: "{{ .Values.queueWorkerPro.initialRetryWait }}"
        - name: "retry_http_codes"
          value: "{{ .Values.queueWorkerPro.httpRetryCodes }}"
        - name: backoff
          value: "{{ .Values.queueWorkerPro.backoff }}"

        {{- if .Values.securityContext }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        {{- end }}

        volumeMounts:
        - name: license
          readOnly: true
          mountPath: "/var/secrets/license"
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}
