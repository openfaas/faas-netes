{{- if and .Values.async (eq .Values.queueMode "jetstream") }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ template "openfaas.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: queue-worker
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: queue-worker
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: {{ .Values.queueWorker.replicas }}
  selector:
    matchLabels:
      app: queue-worker
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
      labels:
        app: queue-worker
    spec:
      volumes:
      {{- if .Values.openfaasPro }}
      - name: license
        secret:
          secretName: openfaas-license
      {{- end }}
      containers:
      - name:  queue-worker
        resources:
          {{- .Values.queueWorker.resources | toYaml | nindent 12 }}
        image: {{ .Values.jetstreamQueueWorker.image }}
        imagePullPolicy: {{ .Values.openfaasImagePullPolicy }}
        command:
          - "jetstream-queue-worker"
          {{- if .Values.openfaasPro }}
          - "-license-file=/var/secrets/license/license"
          {{- end }}
        env:
        {{- if .Values.nats.external.enabled }}
        - name: nats_host
          value: "{{ .Values.nats.external.host }}"
        - name: nats_port
          value: "{{ .Values.nats.external.port }}"
        {{- else }}
        - name: nats_host
          value: "nats.{{ .Release.Namespace }}.svc.{{ .Values.kubernetesDNSDomain }}"
        {{- end}}
        - name: nats_stream
          value: "{{ .Values.nats.channel }}"
        - name: nats_durable
          value: "{{ .Values.jetstreamQueueWorker.durableName }}"
        - name: nats_stream_replicas
          value: "{{ .Values.nats.streamReplication }}"
        - name: gateway_url
          value: "http://gateway.{{ .Release.Namespace }}.svc.{{ .Values.kubernetesDNSDomain }}:8080"
        - name: ack_wait
          value: "{{ .Values.queueWorker.ackWait }}"
        - name: max_inflight
          value: "{{ .Values.queueWorker.maxInflight }}"
        - name: "debug"
          value: "{{ .Values.jetstreamQueueWorker.logs.debug }}"
        - name: "log_encoding"
          value: "{{ .Values.jetstreamQueueWorker.logs.format }}"
        - name: upstream_timeout
          value: "{{ .Values.gateway.upstreamTimeout }}"

        # OpenFaaS PRO license required
        - name: "max_retry_attempts"
          value: "{{ .Values.queueWorkerPro.maxRetryAttempts }}"
        - name: "max_retry_wait"
          value: "{{ .Values.queueWorkerPro.maxRetryWait }}"
        - name: "initial_retry_wait"
          value: "{{ .Values.queueWorkerPro.initialRetryWait }}"
        - name: "retry_http_codes"
          value: "{{ .Values.queueWorkerPro.httpRetryCodes }}"
        - name: print_request_body
          value: "{{ .Values.queueWorkerPro.printRequestBody }}"
        - name: print_response_body
          value: "{{ .Values.queueWorkerPro.printResponseBody }}"
        {{- if .Values.openfaasPro }}
        - name: "tls_insecure"
          value: "{{ .Values.queueWorkerPro.insecureTLS }}"
        {{- end }}

        volumeMounts:
        {{- if .Values.openfaasPro }}
        - name: license
          readOnly: true
          mountPath: "/var/secrets/license"
        {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}